
## 项目 Readme

### Sudoku Solver (数独求解器)

这是一个用 Mobl 语言实现的数独求解器。它能够解析数独谜题字符串，并使用**回溯搜索算法 (Backtracking Search Algorithm)** 结合**约束传播 (Constraint Propagation)** 来找到解决方案。

#### 功能 (Features)

  * 将数独方格坐标（例如“A1”）转换为内部索引。
  * 初始化数独网格，包含所有方格的可能数字。
  * **核心约束传播：**
      * 当一个方格被确定时，从其所有同伴（peers）中移除该数字。
      * 如果一个单元格（行、列、3x3宫格）中某个数字只有一个可能的位置，则将该数字赋给该位置。
  * **智能回溯搜索：** 使用“最小剩余值 (Minimum Remaining Values)”启发式方法，优先选择可能性最少的未确定方格进行猜测，以提高求解效率。
  * 将求解后的数独网格格式化为可读的字符串。
  * 健壮的输入解析和错误处理，能检测无效的初始谜题。

#### 使用方法 (Usage)

将数独谜题表示为一个 81 字符的字符串，其中数字表示已知的填充值，`.` 或 `0` 表示空方格。

```mbt
// 示例：解决一个数独谜题
let puzzle = "4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......"
let solution = solve(puzzle)
println(solution)
```

**输出示例：**

```
4 1 7 | 3 6 9 | 8 2 5
6 3 2 | 1 5 8 | 9 4 7
9 5 8 | 7 2 4 | 3 1 6
---------+---------+---------
8 2 5 | 4 3 7 | 1 6 9
7 9 1 | 5 8 6 | 4 3 2
3 4 6 | 9 1 2 | 7 5 8
---------+---------+---------
2 8 9 | 6 4 3 | 5 7 1
5 7 3 | 2 9 1 | 6 8 4
1 6 4 | 8 7 5 | 2 9 3
```

#### 项目结构 (Project Structure)

  * **常量和全局数据结构：** 定义了 `Grid` 类型，以及 `rows`、`cols` 等常量。预计算了 `squares` (所有方格坐标)、`unitlist` (所有单元格的集合)、`units` (每个方格所属的单元格) 和 `peers` (每个方格的同伴)。
  * **核心求解函数：** `assign` (赋值并传播)、`eliminate` (消除可能性并传播)、`parse` (解析输入)、`search` (回溯搜索) 和 `solve` (主入口)。
  * **工具函数：** `square_to_int` (坐标转索引)、`Grid::format` (格式化输出)。

#### 运行测试 (Running Tests)

代码中包含了一个 `test` 块，用于验证求解器的功能。在 Mobl 环境中运行即可执行测试。

```mbt
test {
  // 测试逻辑
}
```
-----

## Bugfix

主要解决了以下关键问题：

1.完善单元格 (Units) 和同伴 (Peers)定义了数独的“单元格”和“同伴”数据结构，设计并正确计算所有行、列、3x3宫格单元以及每个方格的正确同伴集合，这是数独逻辑的基础。
2.输入解析与错误处理，改进了 `square_to_int` 函数的鲁棒性，并使 `Grid::parse` 能够返回可选值 (Option type)**，以便在检测到无效或矛盾的初始布局时能优雅地失败。
3.在assign函数中返回值设置改为bool型，方可在下文eliminate函数正常调用
3.搜索回溯逻辑缺陷，失败代码的 `search` 函数（递归回溯核心）在尝试所有可能性时的循环结构存在逻辑错误，可能导致无法找到解或提前中止。完善代码**修正了回溯循环的控制流**，确保所有可能的路径都被正确探索。


-----

ver 0.1.1
本次修改优化了字符串数组缓存，提升其运算性能
同时增加案例，保证算法的鲁棒性
